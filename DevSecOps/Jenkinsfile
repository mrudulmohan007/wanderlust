pipeline{
    agent any
    environment{
        SONAR_HOME=tool "Sonar"
    }
    stages{
        stage("clone code from github "){
            steps{
                git url: "https://github.com/mrudulmohan007/wanderlust.git", branch: "main"
            }
        }
        stage("SonarQube Quality Analysis"){
             steps{
                withSonarQubeEnv("Sonar"){
                    sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=wanderlust -Dsonar.projectKey=wanderlust"
                }
            }
        }
         stage("OWASP Dependency Check"){
            steps{
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'dc'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
       stage("SonarQube Code Quality Gates"){
                steps{
                    timeout(time: 2, unit: "MINUTES"){
                        waitForQualityGate abortPipeline: false
                    }
                }
        }
        
        stage("Trivy filesystem Scan"){
            steps{
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        
        stage("Code Deploy: Docker-compose"){
            steps{    
             script {
                    // Build and run backend
                    dir('backend') {
                        sh "docker build -t backend ."
                        sh "docker run -d -p 5000:5000 --name backend-container backend"
                    }
                    // Build and run frontend
                    dir('frontend') {
                        sh "docker build -t frontend ."
                        sh "docker run -d -p 5173:5173 --name frontend-container frontend"
                    }
                }
              
            }
        }
    }
}
